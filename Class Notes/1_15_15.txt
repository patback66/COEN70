///////////////////
Final in daily 206

///////////////////
class bag{
    private:
        int cap;
        int size;
        float* p;
        float max;
    public:
        bag(int = 10);
        bag(const bag&);
        ~bag();                      //must have bag, ~bag, operator= if have one
        bag& operator=(const bag&);
        friend ostream& operator<<(ostream&, const bag&);
        float max();
        void add(float);
        bool remove_one(float);
        void remove_all(float);
        bool contains(float);
        int(size);
        bag& operator+(const bag&);
        bag& operator-(const bag&);
}

bag::bag(int c) {
    cap = c;
    size = 0;
    p = new float[c];
    max = 0.0; //will need to check if size is zero before compare for max on add
    //take care when add 1st float
}

bag::~bag() {
    if(p!=NULL)
        delete [] p;
}

bag& bag::operator= (const bag& other) {
    //3 steps: self-check, clear, copy. Must have all 3
    
    if(this == &other) //check for self assignment - called self-check
        return *this;
        
    if(this->p != NULL) //clear
        delete[] this->p;
        
    //copy
    this->p = new float[other.cap];
    this->cap = other.cap;
    this->size = other.size;
    this->max = other.max;
    std::copy(other.p, other.p+other.size, this->p);
    return *this;
}

//copy constructor
bag::bag(const bag& other) {
    this->p = NULL; //constructor
    *this=other;
}

ostream& operator<< (ostream& out, const bag& b) {
    for(int i = 0; i < b.size; i++) {
        out << p[i] << ',';
        //can also do endline check so
        out<< p[i] << (i==b.size-1)?'':',';
    }
    return out;
}

void bag::add(float x) {
    //check the size
    if(this->size == 0)
        max = x;
        /*
        if(this->size==0)
            max=x;
        else if(x> max)
            max = x;
        */
    if(this->size >= cap) {
        increase();
    }
    p[size++]=x;
}

void bag::increase() {
    
    float* temp = new float[cap*2];
    std::copy(p, p+size, temp);
    delete[] p;
    p=temp;
    cap*=2;
}

bool bag::remove_one(float x) {
    for(int i = 0; i < size; i++) {
        if(p[i]== x) {
            p[i] = p[size-1];
            size--;
            return true;
        }
    }
    /*with max
    for(int i = 0; i < size; i++) [
        if(p[i]==x) {
            p[i] = p[size-1];
            size--;
            found = true;
            break;
        }
    ]
    if(x==max && size> 0) {
        max = p[0];
        for(int i = 0; i < size; i++) {
            if(p[i]>max)
                max = p[i];
        }
    }
    return found;
    */
    
    return false;
}

void bag::remove_all(float x) {
    while(this->remove_one(x)){};
}

///////////////////
while(true) {
    
}
//for loop is deterministic, better optimization
for(::) {
    
}

for(;this->remove_one(x);)
///////////////////

int bag::size() {return size;}

int bag:size_one(float x) {
    int count = 0;
    for(int i = 0; i< size; i++) {
        if(p[i] == x)
            count++;
    }
    return count;
}

bag bag::operator+ (const bag& rhs) {
    if(this->size == 0) {
        return rhs;
    }
    if(rhs.size == 0) {
        return *this;
    }
    bag new_bag;
    delete[] new_bag.p;
    new_bag.p = new float[cap + rhs.cap];
    new_bag.cap = cap + rhs.cap;
    new_bag.size = size + rhs.size;
    
    if(max>rhs.max) {
        max_bag.max = max;
    } else {
        new_bag.max = rhs.max;
    }
    
    std::copy(this->p, this->p + this->size, new_bag.p);
    std::copy(rhs.p, rhs.p + rhs.size, new_bag.p + this->size);
    return new_bag;
}

bag bag::operator- (const bag&rhs) {
    bag n;
    if(this->size == 0) {
        return n;
    } if(rhs.size == 0) {
        return n;
    }
    bag a = *this;
    bag b = rhs;
    for(int i = 0; i< a.size; i++) {
        
    }
}

bool bag::contains(float x) {
    for(int i = 0; i < size; i++) {
        if(p[i]==x)
            return true;
    }
    return false;
}